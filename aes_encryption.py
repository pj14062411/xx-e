class AES:
    def __init__(self, key):
        self.key = key
        self.block_size = 16
        key_len = len(key)
        if key_len == 16:
            self.Nk = 4
            self.Nr = 10
        elif key_len == 24:
            self.Nk = 6
            self.Nr = 12
        elif key_len == 32:
            self.Nk = 8
            self.Nr = 14
        else:
            raise ValueError("密钥长度必须为16/24/32字节")
        self.sbox = [
            0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
            0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
            0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
            0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
            0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
            0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
            0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
            0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
            0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
            0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
            0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
            0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
            0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
            0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
            0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
            0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
        ]
        self.inv_sbox = [
            0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
            0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
            0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
            0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
            0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
            0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
            0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
            0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
            0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
            0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
            0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
            0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
            0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
            0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
            0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
            0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
        ]
        self.round_constants = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a]
        self.expanded_key = self._key_expansion()

    def _key_expansion(self):
        key = self.key
        Nk = self.Nk
        Nr = self.Nr
        Nb = 4
        w = []
        for i in range(Nk):
            w.append([key[4*i], key[4*i+1], key[4*i+2], key[4*i+3]])
        for i in range(Nk, Nb * (Nr + 1)):
            temp = w[i-1][:]
            if i % Nk == 0:
                temp = temp[1:] + temp[:1]
                temp = [self.sbox[b] for b in temp]
                temp[0] ^= self.round_constants[(i//Nk)-1]
            elif Nk > 6 and i % Nk == 4:
                temp = [self.sbox[b] for b in temp]
            w.append([w[i-Nk][j] ^ temp[j] for j in range(4)])
        return w

    def _sub_bytes(self, state):
        """字节替换"""
        return [[self.sbox[b] for b in row] for row in state]

    def _inv_sub_bytes(self, state):
        """逆字节替换"""
        return [[self.inv_sbox[b] for b in row] for row in state]

    def _shift_rows(self, state):
        """行移位"""
        return [
            [state[0][0], state[1][1], state[2][2], state[3][3]],
            [state[1][0], state[2][1], state[3][2], state[0][3]],
            [state[2][0], state[3][1], state[0][2], state[1][3]],
            [state[3][0], state[0][1], state[1][2], state[2][3]]
        ]

    def _inv_shift_rows(self, state):
        """逆行移位"""
        return [
            [state[0][0], state[3][1], state[2][2], state[1][3]],
            [state[1][0], state[0][1], state[3][2], state[2][3]],
            [state[2][0], state[1][1], state[0][2], state[3][3]],
            [state[3][0], state[2][1], state[1][2], state[0][3]]
        ]

    def _mix_columns(self, state):
        """列混合"""
        def mul2(x):
            return ((x << 1) ^ (0x1b if (x & 0x80) else 0)) & 0xff

        def mul3(x):
            return mul2(x) ^ x

        new_state = [[0] * 4 for _ in range(4)]
        for i in range(4):
            new_state[0][i] = mul2(state[0][i]) ^ mul3(state[1][i]) ^ state[2][i] ^ state[3][i]
            new_state[1][i] = state[0][i] ^ mul2(state[1][i]) ^ mul3(state[2][i]) ^ state[3][i]
            new_state[2][i] = state[0][i] ^ state[1][i] ^ mul2(state[2][i]) ^ mul3(state[3][i])
            new_state[3][i] = mul3(state[0][i]) ^ state[1][i] ^ state[2][i] ^ mul2(state[3][i])
        return new_state

    def _inv_mix_columns(self, state):
        """逆列混合"""
        def mul2(x):
            return ((x << 1) ^ (0x1b if (x & 0x80) else 0)) & 0xff
        def mul9(x):
            return mul2(mul2(mul2(x))) ^ x
        def mul11(x):
            return mul2(mul2(mul2(x))) ^ mul2(x) ^ x
        def mul13(x):
            return mul2(mul2(mul2(x))) ^ mul2(mul2(x)) ^ x
        def mul14(x):
            return mul2(mul2(mul2(x))) ^ mul2(mul2(x)) ^ mul2(x)
        new_state = [[0] * 4 for _ in range(4)]
        for i in range(4):
            new_state[0][i] = mul14(state[0][i]) ^ mul11(state[1][i]) ^ mul13(state[2][i]) ^ mul9(state[3][i])
            new_state[1][i] = mul9(state[0][i]) ^ mul14(state[1][i]) ^ mul11(state[2][i]) ^ mul13(state[3][i])
            new_state[2][i] = mul13(state[0][i]) ^ mul9(state[1][i]) ^ mul14(state[2][i]) ^ mul11(state[3][i])
            new_state[3][i] = mul11(state[0][i]) ^ mul13(state[1][i]) ^ mul9(state[2][i]) ^ mul14(state[3][i])
        return new_state

    def _add_round_key(self, state, round_key):
        """轮密钥加"""
        return [[state[i][j] ^ round_key[i][j] for j in range(4)] for i in range(4)]

    def encrypt(self, plaintext):
        """加密过程"""
        # 标准AES状态矩阵构造（列优先）
        state = [[plaintext[4 * c + r] for c in range(4)] for r in range(4)]
        
        # 初始轮密钥加
        state = self._add_round_key(state, self.expanded_key[:4])
        
        # 主加密轮
        for round in range(1, self.Nr):
            state = self._sub_bytes(state)
            state = self._shift_rows(state)
            state = self._mix_columns(state)
            state = self._add_round_key(state, self.expanded_key[4*round:4*(round+1)])
        
        # 最后一轮
        state = self._sub_bytes(state)
        state = self._shift_rows(state)
        state = self._add_round_key(state, self.expanded_key[-4:])
        
        # 状态矩阵还原为字节流（列优先）
        return bytes([state[r][c] for c in range(4) for r in range(4)])

    def decrypt(self, ciphertext):
        """解密过程"""
        # 标准AES状态矩阵构造（列优先）
        state = [[ciphertext[4 * c + r] for c in range(4)] for r in range(4)]
        
        # 最后一轮的逆操作
        state = self._add_round_key(state, self.expanded_key[-4:])
        state = self._inv_shift_rows(state)
        state = self._inv_sub_bytes(state)
        
        # 主解密轮
        for round in range(self.Nr-1, 0, -1):
            state = self._add_round_key(state, self.expanded_key[4*round:4*(round+1)])
            state = self._inv_mix_columns(state)
            state = self._inv_shift_rows(state)
            state = self._inv_sub_bytes(state)
        
        # 初始轮密钥加
        state = self._add_round_key(state, self.expanded_key[:4])
        
        # 状态矩阵还原为字节流（列优先）
        return bytes([state[r][c] for c in range(4) for r in range(4)]) 